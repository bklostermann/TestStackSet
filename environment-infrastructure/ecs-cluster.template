{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "This template deploys an ECS cluster to the provided VPC and subnets using an Auto Scaling Group",
  "Parameters" : {
    "ApplicationName" : {
      "Description" : "An Application name that will be prefixed to resource names",
      "Type" : "String"
    },
    "EnvironmentName" : {
      "Description" : "An Environment name that will be prefixed to resource names",
      "Type" : "String"
    },
    "InstanceType" : {
      "Description" : "Which instance type should we use to build the ECS cluster?",
      "Type" : "String",
      "Default" : "c4.large"
    },
    "ClusterSize" : {
      "Description" : "How many ECS hosts do you want to initially deploy?",
      "Type" : "Number",
      "Default" : 1
    },
    "VPC" : {
      "Description" : "Choose which VPC this ECS cluster should be deployed to",
      "Type" : "AWS::EC2::VPC::Id"
    },
    "Subnets" : {
      "Description" : "Choose which subnets this ECS cluster should be deployed to",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },
    "SecurityGroup" : {
      "Description" : "Select the Security Group to use for the ECS cluster hosts",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    "KeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "Key name to use for Gate Three application EC2 instance",
      "Default" : "EllisDon-non-prod-linux-keypair"
    }
  },
  "Mappings" : {
    "AWSRegionToAMI" : {
      "us-east-2" : {
        "AMI" : "ami-64300001"
      },
      "us-east-1" : {
        "AMI" : "ami-aff65ad2"
      },
      "us-west-2" : {
        "AMI" : "ami-40ddb938"
      },
      "us-west-1" : {
        "AMI" : "ami-69677709"
      },
      "eu-west-3" : {
        "AMI" : "ami-250eb858"
      },
      "eu-west-2" : {
        "AMI" : "ami-2218f945"
      },
      "eu-west-1" : {
        "AMI" : "ami-2d386654"
      },
      "eu-central-1" : {
        "AMI" : "ami-9fc39c74"
      },
      "ap-northeast-2" : {
        "AMI" : "ami-9d56f9f3"
      },
      "ap-northeast-1" : {
        "AMI" : "ami-a99d8ad5"
      },
      "ap-southeast-2" : {
        "AMI" : "ami-efda148d"
      },
      "ap-southeast-1" : {
        "AMI" : "ami-846144f8"
      },
      "ca-central-1" : {
        "AMI" : "ami-897ff9ed"
      },
      "ap-south-1" : {
        "AMI" : "ami-72edc81d"
      },
      "sa-east-1" : {
        "AMI" : "ami-4a7e2826"
      }
    }
  },
  "Resources" : {
    "ECSCluster" : {
      "Type" : "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : {
          "Fn::Sub" : "${ApplicationName}-${EnvironmentName}"
        }
      }
    },
    "ECSAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : {
          "Ref" : "Subnets"
        },
        "LaunchConfigurationName" : {
          "Ref" : "ECSLaunchConfiguration"
        },
        "MinSize" : {
          "Ref" : "ClusterSize"
        },
        "MaxSize" : {
          "Ref" : "ClusterSize"
        },
        "DesiredCapacity" : {
          "Ref" : "ClusterSize"
        },
        "Tags" : [ {
          "Key" : "Name",
          "Value" : {
            "Fn::Sub" : "${ApplicationName}-${EnvironmentName}-ECS-Host"
          },
          "PropagateAtLaunch" : "true"
        }, {
          "Key" : "Environment",
          "Value" : {
            "Ref" : "EnvironmentName"
          },
          "PropagateAtLaunch" : "true"
        } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : 1,
          "MaxBatchSize" : 1,
          "PauseTime" : "PT15M",
          "SuspendProcesses" : [ "HealthCheck", "ReplaceUnhealthy", "AZRebalance", "AlarmNotification", "ScheduledActions" ],
          "WaitOnResourceSignals" : true
        }
      }
    },
    "ECSLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : {
          "Fn::FindInMap" : [ "AWSRegionToAMI", {
            "Ref" : "AWS::Region"
          }, "AMI" ]
        },
        "InstanceType" : {
          "Ref" : "InstanceType"
        },
        "SecurityGroups" : [ {
          "Ref" : "SecurityGroup"
        } ],
        "IamInstanceProfile" : {
          "Ref" : "ECSInstanceProfile"
        },
        "KeyName" : {
          "Ref" : "KeyName"
        },
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Sub" : "#!/bin/bash\nyum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\nsudo yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https -y\nsudo yum update -y ecs-init\nyum install -y aws-cfn-bootstrap hibagent\nsudo yum install kernel -y\nsudo yum install aws-cli -y\ncurl -s https://s3.amazonaws.com/download.draios.com/stable/install-agent | sudo bash -s -- --access_key 90c17713-a295-4343-a43a-ccb90d04ae18\n/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration\n/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup\n/usr/bin/enable-ec2-spot-hibernation\n"
          }
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "awslogs" : [ ]
              }
            },
            "commands" : {
              "01_add_instance_to_cluster" : {
                "command" : {
                  "Fn::Sub" : "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"
                }
              }
            },
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "mode" : 256,
                "owner" : "root",
                "group" : "root",
                "content" : {
                  "Fn::Sub" : "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"
                }
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content" : {
                  "Fn::Sub" : "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration\n"
                }
              },
              "/etc/awslogs/awscli.conf" : {
                "content" : {
                  "Fn::Sub" : "[plugins]\ncwlogs = cwlogs\n[default]\nregion = ${AWS::Region}\n"
                }
              },
              "/etc/awslogs/awslogs.conf" : {
                "content" : {
                  "Fn::Sub" : "[general]\nstate_file = /var/lib/awslogs/agent-state\n\n[/var/log/dmesg]\nfile = /var/log/dmesg\nlog_group_name = ${ECSHostLogGroup}\nlog_stream_name = {instance_id}-{hostname}-dmesg\n\n[/var/log/messages]\nfile = /var/log/messages\nlog_group_name = ${ECSHostLogGroup}\nlog_stream_name = {instance_id}-{hostname}-messages\ndatetime_format = %b %d %H:%M:%S\n\n[/var/log/docker]\nfile = /var/log/docker\nlog_group_name = ${ECSHostLogGroup}\nlog_stream_name = {instance_id}-{hostname}-docker\ndatetime_format = %Y-%m-%dT%H:%M:%S.%f\n\n[/var/log/ecs/ecs-init.log]\nfile = /var/log/ecs/ecs-init.log.*\nlog_group_name = ${ECSHostLogGroup}\nlog_stream_name = {instance_id}-{hostname}-ecs-init\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n\n[/var/log/ecs/ecs-agent.log]\nfile = /var/log/ecs/ecs-agent.log.*\nlog_group_name = ${ECSHostLogGroup}\nlog_stream_name = {instance_id}-{hostname}-ecs-agent\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n\n[/var/log/ecs/audit.log]\nfile = /var/log/ecs/audit.log.*\nlog_group_name = ${ECSHostLogGroup}\nlog_stream_name = {instance_id}-{hostname}-ecs-audit\ndatetime_format = %Y-%m-%dT%H:%M:%SZ\n"
                }
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : true,
                  "ensureRunning" : true,
                  "files" : [ "/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf" ]
                },
                "awslogs" : {
                  "enabled" : true,
                  "ensureRunning" : true,
                  "files" : [ "/etc/awslogs/awslogs.conf", "/etc/awslogs/awscli.conf" ]
                }
              }
            }
          }
        }
      }
    },
    "ECSRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Path" : "/",
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Policies" : [ {
          "PolicyName" : {
            "Fn::Sub" : "${ApplicationName}-${EnvironmentName}-ecs-service"
          },
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement" : [ {
              "Effect" : "Allow",
              "Action" : [ "ecs:CreateCluster", "ecs:UpdateContainerInstancesState", "ecs:DeregisterContainerInstance", "ecs:DiscoverPollEndpoint", "ecs:Poll", "ecs:RegisterContainerInstance", "ecs:StartTelemetrySession", "ecs:Submit*", "logs:CreateLogStream", "logs:PutLogEvents", "ecr:BatchCheckLayerAvailability", "ecr:BatchGetImage", "ecr:GetDownloadUrlForLayer", "ecr:GetAuthorizationToken", "ssm:DescribeAssociation", "ssm:GetDeployablePatchSnapshotForInstance", "ssm:GetDocument", "ssm:GetManifest", "ssm:GetParameters", "ssm:ListAssociations", "ssm:ListInstanceAssociations", "ssm:PutInventory", "ssm:PutComplianceItems", "ssm:PutConfigurePackageResult", "ssm:UpdateAssociationStatus", "ssm:UpdateInstanceAssociationStatus", "ssm:UpdateInstanceInformation", "ec2messages:AcknowledgeMessage", "ec2messages:DeleteMessage", "ec2messages:FailMessage", "ec2messages:GetEndpoint", "ec2messages:GetMessages", "ec2messages:SendReply", "cloudwatch:PutMetricData", "ec2:DescribeInstanceStatus", "ds:CreateComputer", "ds:DescribeDirectories", "logs:CreateLogGroup", "logs:CreateLogStream", "logs:DescribeLogGroups", "logs:DescribeLogStreams", "logs:PutLogEvents", "s3:PutObject", "s3:GetObject", "s3:AbortMultipartUpload", "s3:ListMultipartUploadParts", "s3:ListBucket", "s3:ListBucketMultipartUploads" ],
              "Resource" : "*"
            } ]
          }
        } ],
        "ManagedPolicyArns" : [ {
          "Fn::ImportValue" : {
            "Fn::Sub" : "${ApplicationName}:SNSPublishAlertsPolicyARN"
          }
        } ]
      }
    },
    "ECSInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ {
          "Ref" : "ECSRole"
        } ]
      }
    },
    "ECSServiceAutoScalingRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2012-10-17",
          "Statement" : {
            "Action" : [ "sts:AssumeRole" ],
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "application-autoscaling.amazonaws.com" ]
            }
          }
        },
        "Path" : "/",
        "Policies" : [ {
          "PolicyName" : "ecs-service-autoscaling",
          "PolicyDocument" : {
            "Statement" : {
              "Effect" : "Allow",
              "Action" : [ "application-autoscaling:*", "cloudwatch:DescribeAlarms", "cloudwatch:PutMetricAlarm", "ecs:DescribeServices", "ecs:UpdateService" ],
              "Resource" : "*"
            }
          }
        } ]
      }
    },
    "ECSLogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {
          "Fn::Sub" : "/${ApplicationName}/${EnvironmentName}/ecs"
        },
        "RetentionInDays" : 90
      }
    },
    "ECSHostLogGroup" : {
      "Type" : "AWS::Logs::LogGroup",
      "Properties" : {
        "LogGroupName" : {
          "Fn::Sub" : "${ECSLogGroup}/ec2host"
        },
        "RetentionInDays" : 90
      }
    }
  },
  "Outputs" : {
    "Cluster" : {
      "Description" : "A reference to the ECS cluster",
      "Value" : {
        "Ref" : "ECSCluster"
      },
      "Export" : {
        "Name" : {
          "Fn::Sub" : "${ApplicationName}:${EnvironmentName}:ClusterName"
        }
      }
    },
    "ECSServiceAutoScalingRole" : {
      "Description" : "A reference to ECS service auto scaling role",
      "Value" : {
        "Fn::GetAtt" : [ "ECSServiceAutoScalingRole", "Arn" ]
      }
    },
    "ECSAutoScalingGroupName" : {
      "Description" : "A reference to ECS AutoScaling Group Name",
      "Value" : {
        "Ref" : "ECSAutoScalingGroup"
      }
    },
    "ECSLogGroup" : {
      "Description" : "Reference to the ECS Log Group",
      "Value" : {
        "Ref" : "ECSLogGroup"
      }
    },
    "ECSRoleName" : {
      "Description" : "ECS role name",
      "Value" : {
        "Ref" : "ECSRole"
      }
    }
  }
}